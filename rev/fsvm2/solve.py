from z3 import *

iters = [
	[73, 45, 69, 78, 57, 38, 40, 25, 45, 0, 78, 0, 26, 65, 33, 82, 96, 34, 93, 78, 36, 16, 75, 58, 96, 94, 0, 69, 25, 27, 98, 0, 94, 50, 9, 60, 43],
	[47, 73, 3, 91, 0, 25, 41, 93, 77, 43, 79, 61, 60, 26, 79, 47, 37, 45, 31, 91, 97, 65, 3, 6, 5, 60, 95, 70, 2, 31, 69, 93, 71, 59, 44, 8, 44],
	[63, 74, 62, 8, 39, 86, 25, 71, 29, 22, 48, 77, 65, 91, 22, 33, 41, 21, 6, 41, 11, 78, 4, 72, 26, 82, 87, 34, 0, 36, 27, 64, 29, 64, 66, 41, 0],
	[74, 84, 44, 72, 28, 52, 50, 89, 75, 36, 43, 6, 13, 46, 84, 56, 83, 4, 62, 95, 33, 43, 31, 46, 35, 24, 54, 27, 91, 46, 91, 47, 18, 6, 28, 1, 28],
	[51, 42, 56, 3, 10, 69, 94, 96, 48, 83, 79, 69, 57, 25, 6, 7, 66, 7, 86, 24, 61, 5, 89, 19, 91, 10, 98, 38, 60, 46, 54, 30, 66, 36, 45, 16, 90],
	[39, 69, 48, 16, 30, 28, 43, 31, 18, 5, 15, 6, 11, 57, 17, 0, 54, 21, 58, 11, 85, 73, 75, 14, 39, 64, 39, 35, 69, 22, 86, 31, 69, 31, 91, 78, 62],
	[98, 37, 37, 83, 79, 47, 99, 84, 70, 45, 72, 77, 95, 10, 48, 5, 31, 92, 73, 34, 5, 36, 82, 41, 85, 11, 9, 2, 25, 92, 56, 26, 54, 54, 75, 42, 51],
	[14, 40, 20, 82, 39, 0, 23, 68, 72, 54, 87, 93, 82, 14, 47, 21, 40, 57, 24, 34, 62, 62, 44, 38, 83, 37, 82, 83, 29, 79, 0, 93, 61, 55, 90, 8, 95],
	[62, 2, 2, 36, 30, 4, 89, 78, 9, 34, 34, 76, 12, 57, 7, 36, 28, 22, 60, 82, 8, 11, 94, 94, 56, 97, 10, 47, 86, 86, 74, 42, 50, 33, 43, 50, 5],
	[79, 74, 9, 62, 99, 43, 23, 78, 68, 97, 56, 47, 80, 52, 28, 42, 24, 13, 74, 10, 0, 25, 6, 23, 76, 51, 36, 63, 42, 44, 84, 2, 72, 72, 14, 54, 94],
	[75, 95, 41, 23, 90, 88, 58, 20, 64, 73, 78, 9, 76, 73, 57, 97, 83, 38, 35, 44, 85, 43, 38, 89, 80, 87, 32, 36, 51, 69, 41, 18, 38, 76, 52, 69, 7],
	[37, 68, 57, 33, 9, 46, 99, 12, 89, 20, 68, 35, 79, 14, 30, 35, 5, 94, 45, 75, 34, 29, 44, 37, 24, 8, 12, 51, 93, 98, 99, 53, 83, 17, 35, 22, 54],
	[33, 21, 36, 63, 49, 56, 75, 62, 98, 98, 32, 91, 34, 56, 82, 29, 85, 75, 78, 47, 53, 19, 27, 7, 35, 69, 82, 88, 20, 6, 62, 45, 4, 64, 41, 57, 16],
	[98, 96, 21, 44, 42, 89, 54, 4, 94, 31, 11, 81, 14, 1, 85, 76, 30, 78, 60, 0, 0, 31, 24, 36, 3, 16, 46, 80, 68, 93, 30, 58, 90, 59, 67, 29, 14],
	[99, 63, 61, 77, 88, 33, 50, 7, 71, 89, 34, 61, 16, 85, 1, 50, 37, 60, 84, 94, 54, 86, 20, 17, 18, 10, 60, 71, 37, 29, 32, 82, 8, 39, 59, 39, 13],
	[99, 75, 53, 18, 5, 90, 42, 12, 6, 37, 61, 75, 28, 63, 17, 50, 72, 13, 6, 96, 69, 23, 55, 67, 61, 56, 18, 45, 47, 17, 8, 21, 66, 11, 96, 19, 50],
	[70, 82, 50, 41, 20, 90, 14, 80, 25, 86, 24, 60, 47, 0, 49, 41, 45, 25, 87, 60, 17, 51, 78, 49, 85, 96, 3, 75, 26, 39, 62, 31, 78, 44, 82, 1, 6],
	[46, 31, 57, 56, 91, 46, 31, 6, 67, 77, 49, 51, 72, 97, 56, 28, 14, 21, 68, 26, 70, 56, 58, 76, 12, 94, 53, 96, 51, 81, 41, 85, 41, 90, 86, 83, 40],
	[56, 42, 29, 97, 45, 73, 21, 30, 43, 27, 15, 67, 69, 33, 87, 91, 35, 99, 97, 45, 37, 48, 69, 25, 0, 20, 19, 34, 59, 5, 70, 81, 57, 79, 24, 85, 73],
	[69, 97, 11, 32, 96, 35, 27, 55, 10, 57, 46, 37, 29, 51, 69, 92, 25, 82, 51, 4, 35, 43, 47, 10, 57, 90, 56, 61, 48, 46, 75, 13, 70, 77, 96, 13, 79],
	[42, 97, 4, 12, 39, 26, 91, 81, 9, 5, 28, 41, 6, 9, 41, 41, 39, 91, 52, 2, 54, 26, 61, 93, 38, 0, 20, 87, 38, 27, 6, 29, 97, 95, 15, 90, 98],
	[65, 45, 62, 15, 4, 67, 84, 61, 50, 24, 68, 11, 47, 29, 85, 42, 13, 98, 87, 93, 50, 23, 36, 20, 4, 82, 4, 14, 50, 10, 56, 56, 82, 68, 89, 77, 40],
	[71, 79, 36, 6, 98, 6, 6, 93, 11, 6, 13, 80, 5, 34, 84, 99, 35, 46, 52, 83, 62, 86, 5, 71, 84, 87, 32, 78, 1, 62, 11, 30, 17, 30, 32, 59, 49],
	[46, 44, 47, 27, 78, 8, 41, 67, 34, 13, 11, 41, 14, 66, 65, 46, 12, 24, 62, 63, 44, 27, 9, 97, 31, 13, 2, 54, 41, 18, 30, 67, 53, 44, 61, 39, 33],
	[87, 59, 32, 15, 36, 78, 13, 67, 27, 1, 34, 35, 9, 70, 44, 17, 1, 56, 71, 30, 72, 62, 42, 63, 29, 91, 34, 58, 53, 0, 52, 37, 66, 16, 54, 58, 97],
	[40, 70, 95, 29, 59, 3, 98, 6, 97, 49, 93, 23, 65, 39, 40, 88, 25, 64, 22, 35, 25, 30, 36, 95, 62, 88, 99, 50, 59, 2, 23, 68, 64, 97, 9, 12, 14],
	[6, 95, 53, 24, 96, 10, 68, 51, 85, 5, 68, 12, 16, 72, 32, 71, 1, 86, 54, 53, 68, 69, 7, 99, 6, 76, 47, 17, 14, 67, 95, 45, 37, 99, 88, 12, 20],
	[47, 40, 6, 3, 1, 54, 82, 15, 61, 95, 27, 29, 96, 17, 38, 7, 22, 80, 60, 59, 76, 22, 80, 44, 94, 10, 44, 95, 76, 20, 72, 38, 63, 65, 56, 39, 22],
	[61, 45, 73, 60, 76, 72, 81, 29, 52, 13, 65, 10, 78, 98, 74, 30, 57, 55, 38, 33, 74, 24, 5, 71, 70, 94, 44, 34, 78, 74, 58, 20, 54, 46, 57, 54, 77],
	[27, 44, 1, 4, 48, 36, 66, 12, 43, 28, 63, 96, 5, 33, 48, 62, 9, 31, 58, 11, 67, 28, 64, 51, 85, 39, 31, 56, 16, 89, 97, 95, 40, 91, 79, 2, 11],
	[40, 55, 87, 21, 53, 27, 25, 67, 46, 90, 47, 27, 2, 68, 48, 77, 41, 66, 80, 33, 48, 10, 70, 24, 18, 1, 22, 60, 28, 38, 76, 37, 98, 90, 15, 18, 2],
	[76, 57, 64, 43, 6, 32, 78, 44, 50, 27, 38, 16, 8, 23, 77, 9, 46, 72, 2, 69, 32, 69, 24, 92, 65, 23, 82, 28, 6, 3, 17, 27, 40, 44, 20, 55, 65],
	[13, 50, 3, 6, 25, 22, 47, 1, 64, 7, 32, 69, 46, 97, 6, 74, 84, 7, 23, 67, 24, 19, 75, 97, 26, 24, 31, 97, 93, 41, 94, 79, 76, 88, 16, 86, 88],
	[65, 2, 30, 94, 5, 98, 98, 97, 84, 69, 47, 39, 64, 36, 78, 43, 31, 54, 5, 92, 1, 38, 42, 59, 84, 0, 18, 49, 99, 60, 35, 79, 25, 43, 28, 8, 81],
	[71, 65, 35, 79, 35, 43, 23, 9, 16, 18, 68, 50, 85, 87, 94, 72, 95, 12, 84, 14, 86, 18, 99, 50, 95, 40, 59, 49, 41, 33, 31, 91, 28, 95, 76, 36, 48],
	[47, 4, 71, 83, 10, 32, 86, 21, 92, 99, 58, 25, 20, 28, 96, 9, 85, 9, 8, 2, 48, 58, 46, 24, 56, 33, 24, 94, 28, 5, 4, 79, 7, 97, 75, 89, 32],
	[33, 17, 25, 83, 75, 98, 0, 85, 86, 68, 20, 41, 64, 56, 70, 58, 14, 69, 14, 60, 72, 87, 75, 1, 60, 88, 46, 27, 46, 51, 32, 38, 12, 14, 4, 32, 27]
]
constraints = [172921, 165441, 154900, 154675, 164170, 140999, 181364, 176240, 153637, 168892, 199062, 158610, 170073, 157596, 168574, 152795, 162218, 198124, 175299, 179403, 145075, 168661, 161959, 134271, 155510, 182674, 169645, 162123, 188831, 151273, 149344, 145154, 167698, 172352, 187042, 155223, 164628]

LEN = 37


flag = [BitVec(f'c{i}', 16) for i in range(LEN)]
s = Solver()

for i in range(9, LEN-1):
	s.add(Or(
		And(flag[i] >= 0x30, flag[i] <= 0x39),
		And(flag[i] >= 0x41, flag[i] < 0x5b),
		And(flag[i] >= 0x61, flag[i] < 0x7b),
		flag[i] == ord('_'),
	))


s.add(flag[0] == ord('o'))
s.add(flag[1] == ord('p'))
s.add(flag[2] == ord('e'))
s.add(flag[3] == ord('n'))
s.add(flag[4] == ord('E'))
s.add(flag[5] == ord('C'))
s.add(flag[6] == ord('S'))
s.add(flag[7] == ord('C'))
s.add(flag[8] == ord('{'))
s.add(flag[LEN-1] == ord('}'))


for c in range(LEN):
	mul = iters[c]
	constraint = constraints[c]

	res = 0
	for i in range(LEN):
		char = flag[LEN-i-1]
		prod = (mul[i]+1) * char
		res += prod

	s.add(res == constraint)



if s.check() == sat:
	m = s.model()
	print(''.join([
		chr(m[flag[i]].as_long())
		for i in range(LEN)
	]))

	s.add(Or([
		flag[i] != m[flag[i]].as_long()
		for i in range(LEN)
	]))

# openECSC{1ts_jus7_4n0ther_vm_582e5a5}
